name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  # ARM Cross-Compile Build (does not run tests)
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies (cross-compile)
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            gcc-aarch64-linux-gnu g++-aarch64-linux-gnu \
            cmake make clang-tidy

      - name: Configure project (ARM toolchain)
        run: cmake -B build -DCMAKE_TOOLCHAIN_FILE=arm64-toolchain.cmake -DCMAKE_BUILD_TYPE=Release

      - name: Build project (ARM)
        run: cmake --build build -- -j$(nproc)

      - name: Run clang-tidy
        run: clang-tidy hello.c -- -I.

  # Native GCC build for tests + coverage
  test:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies (native)
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            cmake make g++ gcc libgtest-dev clang-tidy lcov

      - name: Configure project (native with coverage)
        run: |
          cmake -B build-tests \
            -DCMAKE_BUILD_TYPE=Coverage \
            -DCMAKE_C_FLAGS="--coverage -O0 -g -fprofile-arcs -ftest-coverage" \
            -DCMAKE_CXX_FLAGS="--coverage -O0 -g -fprofile-arcs -ftest-coverage"
          echo "=== DEBUG: CMakeCache.txt build type ==="
          grep CMAKE_BUILD_TYPE build-tests/CMakeCache.txt || echo "No CMAKE_BUILD_TYPE found"

      - name: Build project (native)
        run: cmake --build build-tests -- -j$(nproc)

      - name: Run tests (JUnit XML + coverage)
        working-directory: build-tests
        run: |
          ./test_hello --gtest_output=xml:results.xml
          echo "Checking for coverage files..."
          find . -name "*.gcda" || echo "No .gcda files found!"

      - name: Verify coverage artifacts
        run: |
          echo "Verifying coverage files in build-tests"
          find build-tests -name "*.gcda" || echo "Still no coverage files!"

      - name: Publish test results to GitHub
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: gtest-report
          path: build-tests/results.xml
          reporter: jest-junit

      - name: Generate coverage report
        run: |
          echo "Running lcov..."
          lcov --capture --directory build-tests --output-file build-tests/coverage.info
          lcov --remove build-tests/coverage.info '/usr/*' --output-file build-tests/coverage.info
          lcov --list build-tests/coverage.info
